# Generated by Django 5.0.1 on 2025-04-11 19:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("metadata", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Biobank",
            fields=[
                (
                    "biobank_id",
                    models.CharField(
                        help_text="Identifier for a biosample in repository",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "collection_date",
                    models.DateField(help_text="Date when the biosample was created"),
                ),
                (
                    "specimen_type",
                    models.CharField(
                        choices=[
                            ("D", "EDTA in Cryovial"),
                            ("R", "PAX Tube"),
                            ("SC", "OCD-100 buccal collection kit"),
                            ("SG", "OGR-675 saliva collection kit"),
                            ("X", "Extracted DNA"),
                            ("XR", "Extracted RNA"),
                        ],
                        help_text="Analyte codes printed on biospecimen containers",
                        max_length=10,
                    ),
                ),
                (
                    "current_location",
                    models.CharField(
                        blank=True,
                        help_text="Sample storage location, e.g. UCI, Ambry, CNH",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "freezer_id",
                    models.CharField(
                        blank=True,
                        help_text="Name of freezer or refrigerator the biospecimen is stored in",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "shelf_id",
                    models.CharField(
                        blank=True,
                        help_text="Name of freezer/refrigerator shelf the biospecimen is stored in",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "rack_id",
                    models.CharField(
                        blank=True,
                        help_text="Name of rack the biospecimen is stored in",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "box_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("5x5 cryobox", "5x5 cryobox"),
                            ("9x9 cryobox", "9x9 cryobox"),
                            ("10x10 cryobox", "10x10 cryobox"),
                            ("SBS plate", "SBS plate"),
                            ("Wire rack", "Wire rack"),
                            ("8x12 metal rack", "8x12 metal rack"),
                        ],
                        help_text="Box type the biospecimen is stored in",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "box_id",
                    models.CharField(
                        blank=True,
                        help_text="Box name as labelled",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "box_position",
                    models.CharField(
                        blank=True,
                        help_text="XY coordinates of biospecimens in box or plate, e.g. A01, H12",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "tube_barcode",
                    models.CharField(
                        blank=True,
                        help_text="Barcode on tube if present",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "plate_barcode",
                    models.CharField(
                        blank=True,
                        help_text="Barcode on SBS plate if present or used",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Pending shipment", "Pending shipment"),
                            ("Shipped", "Shipped"),
                            ("Received", "Received"),
                            ("Stored", "Stored"),
                            (
                                "Replacement requested",
                                "Replacement requested, see comments",
                            ),
                            ("Lost", "Lost, see comments"),
                            ("QC issue", "QC issue, see comments"),
                        ],
                        help_text="Biospecimen status while ",
                        max_length=50,
                    ),
                ),
                (
                    "shipment_date",
                    models.DateField(
                        help_text="If the status is shipped, then include a date when it was mailed out."
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True,
                        help_text="Free text description of any quality issues with biospecimens or adverse events.",
                        null=True,
                    ),
                ),
                (
                    "child_analytes",
                    models.ForeignKey(
                        db_column="analyte_id",
                        help_text="The analyte(s) derived from this biospecimen",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytes",
                        to="metadata.analyte",
                    ),
                ),
                (
                    "participant_id",
                    models.ForeignKey(
                        db_column="participant_id",
                        help_text="The participant from whom the biosample was taken",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.participant",
                    ),
                ),
            ],
        ),
    ]
