# Generated by Django 5.0.1 on 2024-07-11 11:16

import config.selectors
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("metadata", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AlignedATACShortRead",
            fields=[
                (
                    "aligned_atac_short_read_id",
                    models.CharField(
                        help_text="Identifier for aligned_atac_short_read (primary key). Experiment_short_read_id + alignment indicator.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "aligned_atac_short_read_file",
                    models.URLField(
                        help_text="Name and path of file with aligned reads.",
                        max_length=1024,
                        unique=True,
                    ),
                ),
                (
                    "aligned_atac_short_read_index_file",
                    models.URLField(
                        help_text="Name and path of index file corresponding to aligned reads file.",
                        max_length=1024,
                        unique=True,
                    ),
                ),
                (
                    "md5sum",
                    models.CharField(
                        help_text="MD5 checksum for file.", max_length=255, unique=True
                    ),
                ),
                (
                    "reference_assembly",
                    models.CharField(
                        choices=[
                            ("GRCh38", "GRCh38"),
                            ("GRCh37", "GRCh37"),
                            ("NCBI36", "NCBI36"),
                            ("NCBI35", "NCBI35"),
                            ("NCBI34", "NCBI34"),
                        ],
                        help_text="Reference assembly used.",
                        max_length=50,
                    ),
                ),
                (
                    "reference_assembly_uri",
                    models.URLField(blank=True, max_length=1024, null=True),
                ),
                ("reference_assembly_details", models.TextField(blank=True, null=True)),
                (
                    "alignment_software",
                    models.CharField(
                        help_text="Software including version number.", max_length=255
                    ),
                ),
                (
                    "gene_annotation_details",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "alignment_log_file",
                    models.URLField(blank=True, max_length=1024, null=True),
                ),
                ("alignment_postprocessing", models.TextField(blank=True, null=True)),
                (
                    "mean_coverage",
                    models.FloatField(
                        help_text="Mean coverage of either the genome or the targeted regions."
                    ),
                ),
                (
                    "percent_uniquely_aligned",
                    models.FloatField(
                        help_text="How many reads aligned to just one place."
                    ),
                ),
                (
                    "percent_multimapped",
                    models.FloatField(
                        help_text="How many reads aligned to multiple places."
                    ),
                ),
                (
                    "percent_unaligned",
                    models.FloatField(help_text="How many reads didn't align."),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AlignedDNAShortRead",
            fields=[
                (
                    "aligned_dna_short_read_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "aligned_dna_short_read_file",
                    models.CharField(
                        max_length=1024,
                        validators=[config.selectors.validate_cloud_url],
                    ),
                ),
                (
                    "aligned_dna_short_read_index_file",
                    models.CharField(
                        max_length=1024,
                        validators=[config.selectors.validate_cloud_url],
                    ),
                ),
                ("md5sum", models.CharField(max_length=32, unique=True)),
                (
                    "reference_assembly",
                    models.CharField(
                        choices=[
                            ("GRCh38", "GRCh38"),
                            ("GRCh37", "GRCh37"),
                            ("NCBI36", "NCBI36"),
                            ("NCBI35", "NCBI35"),
                            ("NCBI34", "NCBI34"),
                        ],
                        max_length=50,
                    ),
                ),
                ("reference_assembly_uri", models.URLField(blank=True, null=True)),
                ("reference_assembly_details", models.TextField(blank=True, null=True)),
                ("alignment_software", models.CharField(max_length=255)),
                ("mean_coverage", models.FloatField(blank=True, null=True)),
                ("analysis_details", models.TextField(blank=True, null=True)),
                ("quality_issues", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Aligned DNA Short Read",
                "verbose_name_plural": "Aligned DNA Short Reads",
            },
        ),
        migrations.CreateModel(
            name="AlignedNanopore",
            fields=[
                (
                    "aligned_nanopore_id",
                    models.CharField(
                        help_text="Identifier for aligned_nanopore (primary key).",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "aligned_nanopore_file",
                    models.URLField(
                        help_text="Name and path of file with aligned reads. This must be a unique path.",
                        unique=True,
                    ),
                ),
                (
                    "aligned_nanopore_index_file",
                    models.URLField(
                        help_text="Name and path of index file corresponding to aligned reads file. This must be a unique path.",
                        unique=True,
                    ),
                ),
                (
                    "md5sum",
                    models.CharField(
                        help_text="MD5 checksum for the file, ensuring file integrity.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "reference_assembly",
                    models.CharField(
                        choices=[
                            ("chm13", "chm13"),
                            ("GRCh38_noalt", "GRCh38_noalt"),
                            ("GRCh38", "GRCh38"),
                            ("GRCh37", "GRCh37"),
                            ("NCBI36", "NCBI36"),
                            ("NCBI35", "NCBI35"),
                            ("NCBI34", "NCBI34"),
                        ],
                        help_text="Reference assembly used for the alignment.",
                        max_length=50,
                    ),
                ),
                (
                    "alignment_software",
                    models.CharField(
                        help_text="Software including version number used for alignment.",
                        max_length=255,
                    ),
                ),
                (
                    "analysis_details",
                    models.TextField(
                        help_text="Brief description of the analysis pipeline used for producing the file."
                    ),
                ),
                (
                    "mean_coverage",
                    models.FloatField(
                        help_text="Mean coverage of either the genome or the targeted regions."
                    ),
                ),
                (
                    "genome_coverage",
                    models.IntegerField(
                        help_text="Percentage of the genome covered at a certain depth (e.g., >=90% at 10x or 20x)."
                    ),
                ),
                (
                    "contamination",
                    models.FloatField(
                        help_text="Contamination level estimate, e.g., <1% (display raw fraction not percent)."
                    ),
                ),
                (
                    "sex_concordance",
                    models.BooleanField(
                        help_text="Comparison between reported sex vs genotype sex."
                    ),
                ),
                (
                    "num_reads",
                    models.IntegerField(
                        help_text="Total reads before ignoring alignment."
                    ),
                ),
                (
                    "num_bases",
                    models.IntegerField(
                        help_text="Number of bases before ignoring alignment."
                    ),
                ),
                (
                    "read_length_mean",
                    models.IntegerField(
                        help_text="Mean length of all reads before ignoring alignment."
                    ),
                ),
                (
                    "num_aligned_reads",
                    models.IntegerField(help_text="Total aligned reads."),
                ),
                (
                    "num_aligned_bases",
                    models.IntegerField(help_text="Number of bases in aligned reads."),
                ),
                (
                    "aligned_read_length_mean",
                    models.IntegerField(help_text="Mean length of aligned reads."),
                ),
                (
                    "read_error_rate",
                    models.FloatField(
                        help_text="Mean empirical per-base error rate of aligned reads."
                    ),
                ),
                (
                    "mapped_reads_pct",
                    models.FloatField(
                        help_text="Number between 1 and 100, representing the percentage of reads that mapped to the reference."
                    ),
                ),
                (
                    "methylation_called",
                    models.BooleanField(
                        help_text="Indicates whether 5mC and 6mA methylation has been called and annotated in the BAM file's MM and ML tags."
                    ),
                ),
                (
                    "quality_issues",
                    models.TextField(
                        help_text="Describe if there are any QC issues that would be important to note."
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AlignedPacBio",
            fields=[
                (
                    "aligned_pac_bio_id",
                    models.CharField(
                        help_text="identifier for aligned_short_read (primary key)",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "aligned_pac_bio_file",
                    models.URLField(
                        help_text="name and path of file with aligned reads"
                    ),
                ),
                (
                    "aligned_pac_bio_index_file",
                    models.URLField(
                        help_text="name and path of index file corresponding to aligned reads file"
                    ),
                ),
                (
                    "md5sum",
                    models.CharField(
                        help_text="md5 checksum for file", max_length=32, unique=True
                    ),
                ),
                (
                    "reference_assembly",
                    models.CharField(
                        choices=[
                            ("chm13", "chm13"),
                            ("GRCh38_noalt", "GRCh38_noalt"),
                            ("GRCh38", "GRCh38"),
                            ("GRCh37", "GRCh37"),
                            ("NCBI36", "NCBI36"),
                            ("NCBI35", "NCBI35"),
                            ("NCBI34", "NCBI34"),
                        ],
                        help_text="Reference assembly used",
                        max_length=50,
                    ),
                ),
                (
                    "alignment_software",
                    models.CharField(
                        help_text="Software including version number used for alignment",
                        max_length=255,
                    ),
                ),
                (
                    "analysis_details",
                    models.TextField(
                        help_text="brief description of the analysis pipeline used for producing the file"
                    ),
                ),
                (
                    "mean_coverage",
                    models.FloatField(
                        help_text="Mean coverage of either the genome or the targeted regions"
                    ),
                ),
                (
                    "genome_coverage",
                    models.IntegerField(
                        help_text="e.g. ≥90% at 10x or 20x; per consortium decision"
                    ),
                ),
                (
                    "contamination",
                    models.FloatField(
                        help_text="Contamination level estimate., e.g. <1% (display raw fraction not percent)"
                    ),
                ),
                (
                    "sex_concordance",
                    models.BooleanField(
                        help_text="Comparison between reported sex vs genotype sex"
                    ),
                ),
                (
                    "num_reads",
                    models.IntegerField(
                        help_text="Total reads (before/ignoring alignment)"
                    ),
                ),
                (
                    "num_bases",
                    models.IntegerField(
                        help_text="Number of bases (before/ignoring alignment)"
                    ),
                ),
                (
                    "read_length_mean",
                    models.IntegerField(
                        help_text="Mean length of all reads (before/ignoring alignment)"
                    ),
                ),
                (
                    "num_aligned_reads",
                    models.IntegerField(help_text="Total aligned reads"),
                ),
                (
                    "num_aligned_bases",
                    models.IntegerField(help_text="Number of bases in aligned reads"),
                ),
                (
                    "aligned_read_length_mean",
                    models.IntegerField(help_text="Mean length of aligned reads"),
                ),
                (
                    "read_error_rate",
                    models.FloatField(
                        help_text="Mean empirical per-base error rate of aligned reads"
                    ),
                ),
                (
                    "mapped_reads_pct",
                    models.FloatField(
                        help_text="Number between 1 and 100, representing the percentage of mapped reads"
                    ),
                ),
                (
                    "methylation_called",
                    models.BooleanField(
                        help_text="Indicates whether 5mC and 6mA methylation has been called and annotated in the BAM file's MM and ML tags"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Aligned",
            fields=[
                (
                    "aligned_id",
                    models.CharField(
                        editable=False,
                        help_text="Automatically generated as table_name.aligned_id_in_table",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "table_name",
                    models.CharField(
                        choices=[
                            ("aligned_dna_short_read", "Aligned DNA Short Read"),
                            ("aligned_rna_short_read", "Aligned RNA Short Read"),
                            ("aligned_nanopore", "Aligned Nanopore"),
                            ("aligned_pac_bio", "Aligned Pac Bio"),
                            ("aligned_atac_short_read", "Aligned ATAC Short Read"),
                        ],
                        help_text="The specific table this aligned data entry references",
                        max_length=50,
                    ),
                ),
                (
                    "id_in_table",
                    models.CharField(
                        help_text="Identifier for the specific entry in the referenced table",
                        max_length=255,
                    ),
                ),
                (
                    "aligned_file",
                    models.CharField(
                        blank=True,
                        help_text="Path to the file containing the aligned data",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "aligned_index_file",
                    models.CharField(
                        blank=True,
                        help_text="Path to the index file associated with the aligned data",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "participant_id",
                    models.ForeignKey(
                        db_column="participant_id",
                        help_text="The participant associated with this aligned data",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.participant",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AlignedDNAShortReadSet",
            fields=[
                (
                    "aligned_dna_short_read_set_id",
                    models.CharField(
                        help_text="identifier for a set of experiments (primary key). For centers uploading multi-sample files, they will need to come up with a value for aligned_short_read_set_id that makes sense to them for indicating the sample group for a multi-sample callset, and use that same value in called_variants_short_read.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "aligned_dna_short_reads",
                    models.ManyToManyField(
                        help_text="the identifiers for single-sample aligned_dna_short_reads included in the read_set",
                        to="experiments.aligneddnashortread",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AlignedNanoporeSet",
            fields=[
                (
                    "aligned_nanopore_set_id",
                    models.CharField(
                        help_text="Identifier for a set of experiments (primary key). RCs make their own IDs (these must begin with center-specific prefix). This ID links the aligned_nanopore table to the called_variants_nanopore table. For centers that are only uploading single sample files, the aligned_nanopore_set_id and aligned_nanopore_id values can be identical. For centers uploading multi-sample files, they will need to come up with a value for aligned_nanopore_set_id that makes sense to them for indicating the sample group for a multi-sample callset, and use that same value in called_variants_nanopore.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "aligned_nanopore",
                    models.ForeignKey(
                        help_text="The identifier for a single-sample aligned_nanopore included in the read set (one per row). This refers to IDs from the aligned_nanopore table.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="experiments.alignednanopore",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AlignedPacBioSet",
            fields=[
                (
                    "aligned_pac_bio_set_id",
                    models.CharField(
                        help_text="Identifier for a set of experiments (primary key). RCs make their own IDs (these must begin with center-specific prefix). For centers that are only uploading single sample files, the aligned_short_read_set_id and aligned_short_read_id values can be identical. For centers uploading multi-sample files, they will need to come up with a value for aligned_short_read_set_id that makes sense to them for indicating the sample group for a multi-sample callset, and use that same value in called_variants_short_read.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "aligned_pac_bio",
                    models.ForeignKey(
                        help_text="The identifier for a single-sample aligned_pac_bio included in the read set (one per row).",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="experiments.alignedpacbio",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CalledPeaksATACShortRead",
            fields=[
                (
                    "called_peaks_atac_short_read_id",
                    models.CharField(
                        help_text="Unique key for table (anvil requirement).",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "called_peaks_file",
                    models.URLField(
                        help_text="Name and path of the bed file with open chromatin peaks after QC filtering.",
                        max_length=1024,
                        unique=True,
                    ),
                ),
                (
                    "peaks_md5sum",
                    models.CharField(
                        help_text="MD5 checksum for called_peaks_file.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "peak_caller_software",
                    models.CharField(
                        help_text="Peak calling software used including version number.",
                        max_length=255,
                    ),
                ),
                (
                    "peak_set_type",
                    models.CharField(
                        choices=[
                            ("narrowPeak", "narrowPeak"),
                            ("gappedPeak", "gappedPeak"),
                            ("IDR", "IDR"),
                        ],
                        help_text="Peak set type, according to ENCODE descriptors.",
                        max_length=50,
                    ),
                ),
                (
                    "analysis_details",
                    models.TextField(
                        blank=True,
                        help_text="Brief description of the analysis pipeline used for producing the called_peaks_file.",
                        null=True,
                    ),
                ),
                (
                    "aligned_atac_short_read",
                    models.OneToOneField(
                        help_text="Identifier for aligned ATAC-seq data.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="experiments.alignedatacshortread",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AlleleSpecificATACShortRead",
            fields=[
                (
                    "asc_atac_short_read_id",
                    models.CharField(
                        help_text="Unique key for table (anvil requirement).",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "asc_file",
                    models.URLField(
                        help_text="Name and path of the tsv file with allele-specific chromatin accessibility measures (logFC) at heterozygous sites after QC and significance testing.",
                        max_length=1024,
                        unique=True,
                    ),
                ),
                (
                    "asc_md5sum",
                    models.CharField(
                        help_text="MD5 checksum for called_peaks_file.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "peak_set_type",
                    models.CharField(
                        choices=[
                            ("narrowPeak", "narrowPeak"),
                            ("gappedPeak", "gappedPeak"),
                            ("IDR", "IDR"),
                        ],
                        help_text="Peak set type, according to ENCODE descriptors.",
                        max_length=50,
                    ),
                ),
                (
                    "het_sites_file",
                    models.URLField(
                        help_text="VCF file containing prefiltered heterozygous sites used for reference alignment bias testing and calling allele-specific chromatin accessibility events.",
                        max_length=1024,
                        unique=True,
                    ),
                ),
                (
                    "het_sites_md5sum",
                    models.CharField(
                        help_text="MD5 checksum for het_sites_file.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "analysis_details",
                    models.TextField(
                        blank=True,
                        help_text="Brief description of the analysis pipeline used for producing the asc_file.",
                        null=True,
                    ),
                ),
                (
                    "called_peaks_atac_short_read",
                    models.ForeignKey(
                        help_text="Identifier for called peaks.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="experiments.calledpeaksatacshortread",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CalledVariantsDNAShortRead",
            fields=[
                (
                    "called_variants_dna_short_read_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "called_variants_dna_file",
                    models.CharField(max_length=255, unique=True),
                ),
                ("md5sum", models.CharField(max_length=32, unique=True)),
                ("caller_software", models.CharField(max_length=255)),
                (
                    "variant_types",
                    models.CharField(
                        choices=[
                            ("SNV", "Single Nucleotide Variant"),
                            ("INDEL", "Insertion/Deletion"),
                            ("SV", "Structural Variant"),
                            ("CNV", "Copy Number Variant"),
                            ("RE", "Repeat Expansion"),
                            ("MEI", "Mobile Element Insertion"),
                            ("STR", "Short Tandem Repeat"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "analysis_details",
                    models.TextField(
                        blank=True,
                        help_text="brief description of the analysis pipeline used for producing the file; perhaps a link to something like a WDLfile or github repository",
                        null=True,
                    ),
                ),
                (
                    "aligned_dna_short_read_set_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="experiments.aligneddnashortreadset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CalledVariantsNanopore",
            fields=[
                (
                    "called_variants_nanopore_id",
                    models.CharField(
                        help_text="Unique key for table (anvil requirement).",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "called_variants_dna_file",
                    models.CharField(
                        help_text="Name and path of the file with variant calls. Stored as a unique bucket path.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "md5sum",
                    models.CharField(
                        help_text="MD5 checksum for file, computed prior to upload to verify file integrity.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "caller_software",
                    models.CharField(
                        help_text="Variant calling software used including version number.",
                        max_length=255,
                    ),
                ),
                (
                    "variant_types",
                    models.CharField(
                        help_text="Types of variants called, separated by '|'. Can include types such as SNV, INDEL, SV, CNV, RE, and MEI.",
                        max_length=255,
                    ),
                ),
                (
                    "analysis_details",
                    models.TextField(
                        blank=True,
                        help_text="Brief description of the analysis pipeline used for producing the file; perhaps a link to something like a WDL file or GitHub repository.",
                        null=True,
                    ),
                ),
                (
                    "aligned_nanopore_set",
                    models.ForeignKey(
                        help_text="Identifier for experiment set. This refers to IDs from the aligned_nanopore_set table.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="experiments.alignednanoporeset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CalledVariantsPacBio",
            fields=[
                (
                    "called_variants_pac_bio_id",
                    models.CharField(
                        help_text="Unique key for table (ANVIL requirement).",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "called_variants_dna_file",
                    models.CharField(
                        help_text="Name and path of the file with variant calls. Stored on Google Cloud Storage (gs://).",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "md5sum",
                    models.CharField(
                        help_text="MD5 checksum for file. md5sum computed prior to upload (used to verify file integrity).",
                        max_length=32,
                        unique=True,
                    ),
                ),
                (
                    "caller_software",
                    models.CharField(
                        help_text="Variant calling software used including version number.",
                        max_length=255,
                    ),
                ),
                (
                    "variant_types",
                    models.CharField(
                        help_text="Types of variants called. SNV, INDEL, SV, CNV, RE, MEI. If there are two VCFs for SNV and Indels, there would be two different lines in this table; if combined in one VCF, a |-delimited entry.",
                        max_length=255,
                    ),
                ),
                (
                    "analysis_details",
                    models.TextField(
                        blank=True,
                        help_text="Brief description of the analysis pipeline used for producing the file; perhaps a link to something like a WDL file or github repository.",
                    ),
                ),
                (
                    "aligned_pac_bio_set",
                    models.ForeignKey(
                        help_text="Identifier for experiment set.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="experiments.alignedpacbioset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Experiment",
            fields=[
                (
                    "experiment_id",
                    models.CharField(
                        help_text="Unique ID of this experiment instance combining the table name and an ID within the table.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "table_name",
                    models.CharField(
                        choices=[
                            ("experiment_dna_short_read", "DNA Short Read"),
                            ("experiment_rna_short_read", "RNA Short Read"),
                            ("experiment_nanopore", "Nanopore"),
                            ("experiment_pac_bio", "Pac Bio"),
                            ("experiment_atac_short_read", "ATAC Short Read"),
                        ],
                        help_text="Specifies the experiment table.",
                        max_length=50,
                    ),
                ),
                (
                    "id_in_table",
                    models.CharField(
                        help_text="Unique identifier within the specific experiment table.",
                        max_length=255,
                    ),
                ),
                (
                    "participant_id",
                    models.ForeignKey(
                        db_column="participant_id",
                        help_text="References the participant associated with this experiment.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="experiments",
                        to="metadata.participant",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExperimentATACShortRead",
            fields=[
                (
                    "experiment_atac_short_read_id",
                    models.CharField(
                        help_text="Identifier for experiment_atac_short_read (primary key). RCs make their own IDs, must begin with center abbreviation as defined in participant table; need to be globally unique in consortium; may be generated by prepending experiment_sample_id with center abbreviation.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "experiment_sample_id",
                    models.CharField(
                        help_text="Identifier used in the data file (e.g., the SM tag in a BAM header, column headers for genotype fields in a VCF file). May be the same as experiment_short_read_id if the file does contain sample identifiers. Should be present if downstream file contains a sample_id (e.g., BAM, VCF). Some centers have one id for the sample (tube) and a different ID for the sample as named in the VCF.",
                        max_length=255,
                    ),
                ),
                (
                    "seq_library_prep_kit_method",
                    models.CharField(
                        help_text="Library prep kit used. Can be missing if RC receives external data.",
                        max_length=255,
                    ),
                ),
                (
                    "read_length",
                    models.IntegerField(
                        help_text="Sequenced read length (bp); GREGoR RCs do paired end sequencing, so is the example of 100bp indicates 2x100bp. Can be missing if RC receives external data; all RCs are doing paired-end reads."
                    ),
                ),
                (
                    "experiment_type",
                    models.CharField(
                        choices=[
                            ("targeted", "Targeted"),
                            ("genome", "Genome"),
                            ("exome", "Exome"),
                        ],
                        help_text="Type of experiment. Facilitates having exome and GS-SR experiments in the same experiment_details table.",
                        max_length=255,
                    ),
                ),
                (
                    "targeted_regions_method",
                    models.CharField(
                        blank=True,
                        help_text="Which capture kit is used. Can be missing if RC receives external data.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "targeted_region_bed_file",
                    models.CharField(
                        blank=True,
                        help_text="Name and path of bed file uploaded to workspace. Can be missing if RC receives external data.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "date_data_generation",
                    models.DateField(
                        help_text="Date of data generation (First sequencing date). Can be missing if RC receives external data; ISO 8601 date format."
                    ),
                ),
                (
                    "target_insert_size",
                    models.IntegerField(
                        blank=True,
                        help_text="Insert size the protocol targets for DNA fragments. Can be missing if RC receives external data.",
                        null=True,
                    ),
                ),
                (
                    "sequencing_platform",
                    models.CharField(
                        help_text="Sequencing platform used for the experiment. Can be missing if RC receives external data.",
                        max_length=255,
                    ),
                ),
                (
                    "analyte_id",
                    models.ForeignKey(
                        help_text="Reference to analyte ID.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.analyte",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="alignedatacshortread",
            name="experiment_atac_short_read",
            field=models.ForeignKey(
                help_text="Identifier for experiment. Reference to experiment_atac_short_read.experiment_atac_short_read_id.",
                on_delete=django.db.models.deletion.CASCADE,
                to="experiments.experimentatacshortread",
            ),
        ),
        migrations.CreateModel(
            name="ExperimentDNAShortRead",
            fields=[
                (
                    "experiment_dna_short_read_id",
                    models.CharField(
                        help_text="identifier for experiment_dna_short_read (primary key)",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "experiment_sample_id",
                    models.CharField(
                        help_text="identifier used in the data file", max_length=255
                    ),
                ),
                (
                    "seq_library_prep_kit_method",
                    models.CharField(
                        blank=True, help_text="Library prep kit used", max_length=255
                    ),
                ),
                (
                    "read_length",
                    models.IntegerField(
                        blank=True, help_text="sequenced read length (bp)", null=True
                    ),
                ),
                (
                    "experiment_type",
                    models.CharField(
                        choices=[
                            ("targeted", "Targeted"),
                            ("genome", "Genome"),
                            ("exome", "Exome"),
                        ],
                        help_text="type of sequencing experiment performed",
                        max_length=50,
                    ),
                ),
                (
                    "targeted_regions_method",
                    models.CharField(
                        blank=True,
                        help_text="Which capture kit is used",
                        max_length=255,
                    ),
                ),
                (
                    "targeted_region_bed_file",
                    models.CharField(
                        blank=True,
                        help_text="name and path of bed file uploaded to workspace",
                        max_length=255,
                    ),
                ),
                (
                    "date_data_generation",
                    models.DateField(
                        blank=True,
                        help_text="Date of data generation (First sequencing date)",
                        null=True,
                    ),
                ),
                (
                    "target_insert_size",
                    models.IntegerField(
                        blank=True,
                        help_text="insert size the protocol targets for DNA fragments",
                        null=True,
                    ),
                ),
                (
                    "sequencing_platform",
                    models.CharField(
                        blank=True,
                        help_text="sequencing platform used for the experiment",
                        max_length=100,
                    ),
                ),
                (
                    "sequencing_event_details",
                    models.TextField(
                        blank=True,
                        help_text="describe if there are any sequencing-specific issues that would be important to note",
                    ),
                ),
                (
                    "analyte_id",
                    models.ForeignKey(
                        help_text="reference to an analyte from which this experiment was derived",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.analyte",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="aligneddnashortread",
            name="experiment_dna_short_read_id",
            field=models.ForeignKey(
                db_column="experiment_dna_short_read_id",
                on_delete=django.db.models.deletion.CASCADE,
                to="experiments.experimentdnashortread",
            ),
        ),
        migrations.CreateModel(
            name="ExperimentNanopore",
            fields=[
                (
                    "experiment_nanopore_id",
                    models.CharField(
                        help_text="Identifier for experiment_nanopore (primary key).",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "experiment_sample_id",
                    models.CharField(
                        help_text="Identifier used in the data file.", max_length=255
                    ),
                ),
                (
                    "seq_library_prep_kit_method",
                    models.CharField(
                        choices=[
                            ("LSK109", "LSK109"),
                            ("LSK110", "LSK110"),
                            ("LSK111", "LSK111"),
                            ("Kit 14", "Kit 14"),
                            ("Rapid", "Rapid"),
                            ("Rapid kit 14", "Rapid kit 14"),
                            ("Unknown", "Unknown"),
                        ],
                        help_text="Library prep kit used.",
                        max_length=255,
                    ),
                ),
                (
                    "fragmentation_method",
                    models.TextField(
                        help_text="Method used for shearing/fragmentation."
                    ),
                ),
                (
                    "experiment_type",
                    models.CharField(
                        choices=[("targeted", "targeted"), ("genome", "genome")],
                        help_text="Type of experiment.",
                        max_length=255,
                    ),
                ),
                (
                    "targeted_regions_method",
                    models.TextField(help_text="Capture method used."),
                ),
                (
                    "targeted_region_bed_file",
                    models.URLField(
                        help_text="Name and path of bed file uploaded to workspace."
                    ),
                ),
                (
                    "date_data_generation",
                    models.DateField(help_text="Date of data generation."),
                ),
                (
                    "sequencing_platform",
                    models.CharField(
                        choices=[
                            (
                                "Oxford Nanopore PromethION 48",
                                "Oxford Nanopore PromethION 48",
                            ),
                            (
                                "Oxford Nanopore PromethION 24",
                                "Oxford Nanopore PromethION 24",
                            ),
                            (
                                "Oxford Nanopore PromethION P2",
                                "Oxford Nanopore PromethION P2",
                            ),
                            (
                                "Oxford Nanopore PromethION P2 Solo",
                                "Oxford Nanopore PromethION P2 Solo",
                            ),
                            (
                                "Oxford Nanopore MinION Mk1C",
                                "Oxford Nanopore MinION Mk1C",
                            ),
                            (
                                "Oxford Nanopore MinION Mk1B",
                                "Oxford Nanopore MinION Mk1B",
                            ),
                            ("Oxford Nanopore Flongle", "Oxford Nanopore Flongle"),
                        ],
                        help_text="Sequencing platform used for the experiment.",
                        max_length=255,
                    ),
                ),
                (
                    "chemistry_type",
                    models.CharField(
                        choices=[("R9.4.1", "R9.4.1"), ("R10.4.1", "R10.4.1")],
                        help_text="Chemistry type used for the experiment.",
                        max_length=255,
                    ),
                ),
                (
                    "was_barcoded",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates whether samples were barcoded on this flowcell.",
                    ),
                ),
                (
                    "barcode_kit",
                    models.CharField(
                        blank=True,
                        help_text="Name of the kit used for barcoding.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "analyte",
                    models.ForeignKey(
                        help_text="Identifier for the analyte used in the experiment.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.analyte",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="alignednanopore",
            name="experiment_nanopore",
            field=models.ForeignKey(
                help_text="Identifier for experiment, referencing the experiment_nanopore_id from the experiment_nanopore table.",
                on_delete=django.db.models.deletion.CASCADE,
                to="experiments.experimentnanopore",
            ),
        ),
        migrations.CreateModel(
            name="ExperimentPacBio",
            fields=[
                (
                    "experiment_pac_bio_id",
                    models.CharField(
                        help_text="identifier for experiment_short_read (primary key)",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "experiment_sample_id",
                    models.CharField(
                        blank=True,
                        help_text="identifier used in the data file (e.g., the SM tag in a BAM header, column headers for genotype fields in a VCF file)",
                        max_length=255,
                    ),
                ),
                (
                    "seq_library_prep_kit_method",
                    models.CharField(
                        choices=[
                            ("SMRTbell prep kit 3.0", "SMRTbell prep kit 3.0"),
                            (
                                "HiFI express template prep kit 2.0",
                                "HiFI express template prep kit 2.0",
                            ),
                        ],
                        help_text="Library prep kit used",
                        max_length=255,
                    ),
                ),
                (
                    "fragmentation_method",
                    models.CharField(
                        blank=True,
                        help_text="method used for shearing/fragmentation",
                        max_length=255,
                    ),
                ),
                (
                    "experiment_type",
                    models.CharField(
                        choices=[
                            ("targeted", "targeted"),
                            ("genome", "genome"),
                            ("fiberseq", "fiberseq"),
                            ("isoseq", "isoseq"),
                            ("masseq", "masseq"),
                        ],
                        help_text="Type of experiment conducted",
                        max_length=50,
                    ),
                ),
                (
                    "targeted_regions_method",
                    models.CharField(
                        blank=True, help_text="Capture method used.", max_length=255
                    ),
                ),
                (
                    "targeted_region_bed_file",
                    models.CharField(
                        blank=True,
                        help_text="name and path of bed file uploaded to workspace",
                        max_length=255,
                    ),
                ),
                (
                    "date_data_generation",
                    models.DateField(
                        blank=True,
                        help_text="Date of data generation (First sequencing date)",
                        null=True,
                    ),
                ),
                (
                    "sequencing_platform",
                    models.CharField(
                        choices=[
                            ("PacBio Revio", "PacBio Revio"),
                            ("PacBio Sequel IIe", "PacBio Sequel IIe"),
                            ("PacBio Sequel II", "PacBio Sequel II"),
                        ],
                        help_text="sequencing platform used for the experiment",
                        max_length=255,
                    ),
                ),
                (
                    "was_barcoded",
                    models.BooleanField(
                        default=False,
                        help_text="indicates whether samples were barcoded on this flowcell",
                    ),
                ),
                (
                    "barcode_kit",
                    models.CharField(
                        blank=True, help_text="Barcode kit used", max_length=255
                    ),
                ),
                (
                    "application_kit",
                    models.CharField(
                        blank=True,
                        help_text="Library prep kits for special applications",
                        max_length=255,
                    ),
                ),
                (
                    "smrtlink_server_version",
                    models.CharField(
                        help_text="Version number of PacBio SMRTLink software",
                        max_length=255,
                    ),
                ),
                (
                    "instrument_ics_version",
                    models.CharField(
                        help_text="Version number of PacBio instrument control software",
                        max_length=255,
                    ),
                ),
                (
                    "size_selection_method",
                    models.CharField(
                        blank=True,
                        help_text="method use for library size selection",
                        max_length=255,
                    ),
                ),
                (
                    "library_size",
                    models.CharField(
                        blank=True,
                        help_text="expected size of library from FemtoPulse",
                        max_length=255,
                    ),
                ),
                (
                    "smrt_cell_kit",
                    models.CharField(
                        blank=True,
                        help_text="part number of the SMRT Cell",
                        max_length=255,
                    ),
                ),
                (
                    "smrt_cell_id",
                    models.CharField(
                        blank=True,
                        help_text="unique serial number for SMRT Cell",
                        max_length=255,
                    ),
                ),
                (
                    "movie_name",
                    models.CharField(
                        blank=True,
                        help_text="unique name of sequencing collection",
                        max_length=255,
                    ),
                ),
                (
                    "polymerase_kit",
                    models.CharField(
                        blank=True,
                        help_text="part number of polymerase kit used",
                        max_length=255,
                    ),
                ),
                (
                    "sequencing_kit",
                    models.CharField(
                        blank=True,
                        help_text="part number of sequencing kit reagents",
                        max_length=255,
                    ),
                ),
                (
                    "movie_length_hours",
                    models.FloatField(
                        blank=True,
                        help_text="length of sequencing collection, in hrs",
                        null=True,
                    ),
                ),
                (
                    "includes_kinetics",
                    models.BooleanField(
                        default=False, help_text="run reports base kinetics"
                    ),
                ),
                (
                    "includes_CpG_methylation",
                    models.BooleanField(
                        default=False, help_text="run reports CpG methylation"
                    ),
                ),
                (
                    "by_strand",
                    models.BooleanField(
                        default=False, help_text="run reports separate reads per strand"
                    ),
                ),
                (
                    "analyte",
                    models.ForeignKey(
                        help_text="Analyte identifier linked to the ExperimentPacBio",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.analyte",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="alignedpacbio",
            name="experiment_pac_bio",
            field=models.ForeignKey(
                help_text="identifier for experiment",
                on_delete=django.db.models.deletion.CASCADE,
                to="experiments.experimentpacbio",
            ),
        ),
        migrations.CreateModel(
            name="ExperimentRNAShortRead",
            fields=[
                (
                    "experiment_rna_short_read_id",
                    models.CharField(
                        help_text="Identifier for experiment_rna_short_read (primary key).",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "experiment_sample_id",
                    models.CharField(
                        help_text="Identifier used in the data file, such as the SM tag in a BAM header or column headers for genotype fields in a VCF file.",
                        max_length=255,
                    ),
                ),
                (
                    "seq_library_prep_kit_method",
                    models.CharField(
                        blank=True,
                        help_text="Library prep kit used, can be missing if RC receives external data.",
                        max_length=255,
                    ),
                ),
                (
                    "library_prep_type",
                    models.CharField(
                        choices=[
                            ("stranded poly-A pulldown", "Stranded Poly-A Pulldown"),
                            ("stranded total RNA", "Stranded Total RNA"),
                            ("rRNA depletion", "rRNA Depletion"),
                            ("globin depletion", "Globin Depletion"),
                        ],
                        help_text="Type of library prep used.",
                        max_length=255,
                    ),
                ),
                (
                    "experiment_type",
                    models.CharField(
                        choices=[
                            ("single-end", "Single-End"),
                            ("paired-end", "Paired-End"),
                            ("targeted", "Targeted"),
                            ("untargeted", "Untargeted"),
                        ],
                        help_text="Type of RNA sequencing experiment.",
                        max_length=255,
                    ),
                ),
                (
                    "read_length",
                    models.IntegerField(
                        help_text="Sequenced read length in base pairs; GREGoR RCs do paired end sequencing, so 100bp indicates 2x100bp."
                    ),
                ),
                (
                    "single_or_paired_ends",
                    models.CharField(
                        choices=[
                            ("single-end", "Single-End"),
                            ("paired-end", "Paired-End"),
                        ],
                        help_text="Specifies if the sequencing was single or paired end.",
                        max_length=255,
                    ),
                ),
                (
                    "date_data_generation",
                    models.DateField(
                        blank=True,
                        help_text="Date when the data was generated; format should follow ISO 8601 (YYYY-MM-DD).",
                        null=True,
                    ),
                ),
                (
                    "sequencing_platform",
                    models.CharField(
                        blank=True,
                        help_text="Sequencing platform used for the experiment.",
                        max_length=255,
                    ),
                ),
                (
                    "within_site_batch_name",
                    models.CharField(
                        help_text="Batch number for the site, important for future batch correction.",
                        max_length=255,
                    ),
                ),
                (
                    "RIN",
                    models.FloatField(
                        blank=True,
                        help_text="RIN number for quality of sample.",
                        null=True,
                    ),
                ),
                (
                    "estimated_library_size",
                    models.FloatField(
                        blank=True,
                        help_text="Estimated size of the library.",
                        null=True,
                    ),
                ),
                (
                    "total_reads",
                    models.FloatField(
                        blank=True,
                        help_text="Total number of reads; should be input as an integer despite the float type.",
                        null=True,
                    ),
                ),
                (
                    "percent_rRNA",
                    models.FloatField(
                        blank=True, help_text="Percentage of rRNA.", null=True
                    ),
                ),
                (
                    "percent_mRNA",
                    models.FloatField(
                        blank=True, help_text="Percentage of mRNA.", null=True
                    ),
                ),
                (
                    "percent_mtRNA",
                    models.FloatField(
                        blank=True, help_text="Percentage of mtRNA.", null=True
                    ),
                ),
                (
                    "percent_Globin",
                    models.FloatField(
                        blank=True, help_text="Percentage of Globin.", null=True
                    ),
                ),
                (
                    "percent_UMI",
                    models.FloatField(
                        blank=True,
                        help_text="Percentage of UMI (Unique Molecular Identifier).",
                        null=True,
                    ),
                ),
                (
                    "five_prime_three_prime_bias",
                    models.FloatField(
                        blank=True, help_text="5' to 3' bias of sequencing.", null=True
                    ),
                ),
                (
                    "percent_GC",
                    models.FloatField(
                        blank=True, help_text="GC content percentage.", null=True
                    ),
                ),
                (
                    "percent_chrX_Y",
                    models.FloatField(
                        blank=True,
                        help_text="Percentage of reads from chromosome X and Y.",
                        null=True,
                    ),
                ),
                (
                    "analyte",
                    models.ForeignKey(
                        help_text="Reference to the analyte ID from which this experiment derives.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.analyte",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AlignedRNAShortRead",
            fields=[
                (
                    "aligned_rna_short_read_id",
                    models.CharField(
                        help_text="Identifier for aligned_short_read (primary key).",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "aligned_rna_short_read_file",
                    models.CharField(
                        help_text="Name and path of file with aligned reads.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "aligned_rna_short_read_index_file",
                    models.CharField(
                        help_text="Name and path of index file corresponding to aligned reads file.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "md5sum",
                    models.CharField(
                        help_text="MD5 checksum for file.", max_length=255, unique=True
                    ),
                ),
                (
                    "reference_assembly",
                    models.CharField(
                        choices=[
                            ("GRCh38", "GRCh38"),
                            ("GRCh37", "GRCh37"),
                            ("NCBI36", "NCBI36"),
                            ("NCBI35", "NCBI35"),
                            ("NCBI34", "NCBI34"),
                        ],
                        help_text="Reference genome assembly used.",
                        max_length=50,
                    ),
                ),
                (
                    "reference_assembly_uri",
                    models.URLField(help_text="URI for reference assembly file."),
                ),
                (
                    "reference_assembly_details",
                    models.TextField(
                        help_text="Details about the reference assembly used."
                    ),
                ),
                (
                    "gene_annotation",
                    models.CharField(
                        help_text="Annotation file used for alignment.", max_length=255
                    ),
                ),
                (
                    "gene_annotation_details",
                    models.TextField(
                        help_text="Detailed description of gene annotation used."
                    ),
                ),
                (
                    "alignment_software",
                    models.CharField(
                        help_text="Software including version number used for alignment.",
                        max_length=255,
                    ),
                ),
                (
                    "alignment_log_file",
                    models.CharField(
                        help_text="Path of (log) file with all parameters for alignment software.",
                        max_length=255,
                    ),
                ),
                (
                    "alignment_postprocessing",
                    models.TextField(help_text="Post processing applied to alignment."),
                ),
                (
                    "mean_coverage",
                    models.FloatField(
                        help_text="Mean coverage of either the genome or the targeted regions."
                    ),
                ),
                (
                    "percent_uniquely_aligned",
                    models.FloatField(
                        help_text="Percentage of reads that aligned to just one place."
                    ),
                ),
                (
                    "percent_multimapped",
                    models.FloatField(
                        help_text="Percentage of reads that aligned to multiple places."
                    ),
                ),
                (
                    "percent_unaligned",
                    models.FloatField(
                        help_text="Percentage of reads that didn't align."
                    ),
                ),
                (
                    "quality_issues",
                    models.TextField(
                        help_text="Any QC issues that would be important to note."
                    ),
                ),
                (
                    "experiment_rna_short_read",
                    models.ForeignKey(
                        help_text="Identifier for experiment.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="experiments.experimentrnashortread",
                    ),
                ),
            ],
        ),
    ]
